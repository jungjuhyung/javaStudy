package com.ict.day14;

public class Ex01 {
	/*
	 내부 클래스 : 클래스 안에 다른 클래스가 정의 되어 있는 클래스
	 종류 : Member(맴버), Local(지역), static, Anonymous(익명)
	 
	 1. Member
	 	외부 클래스{
	 	...(외부 클래스 맴버들)
	 	내부클래스{
	 	......}
	 	...}
	 	특징) -내부 클래스는 외부클래스의 맴버필드와 맴버메서드를 마음대로 사용 가능(상속과 비슷)
	 		  단, 상속은 private 접근 안됨, 내부 클래스는 private 접근 가능
	 		-외부클래스를 통해서만 내부클래스를 생성할 수 있다.
	 			(내부클래스만 별도로 객체 생성이 안된다.)
	 2. Local
	 	외부 클래스{
	 	...
	 	public void 외부클래스메서드(){
	 	내부 클래스{
	 	.......} //내부 클래스 끝
	 	.....} // 외부 메서드 끝
	 	...}// 외부 클래스 끝
	 	특징) -외부 클래스의 메서드 안에 내부클래스가 존재
	 		-외부 클래스의 지역변수처럼 사용된다.
	 		-내부클래스를 가진 외부클래스의 메서드가 실행되어야 내부클래스를 생성할 수 있는 조건이 된다.
	 		-지역변수처럼 사용되기 때문에 내부클래스를 가진 외부클래스의 메서드가 종료되면 내부클래스도 사라진다.
	 3. static 내부 클래스
	 	외부 클래스{
	 	...(외부 클래스 맴버들)
	 	static 내부클래스{
	 	static 변수
	 	......}
	 	...}
	 	특징) -Member 내부클래스와 같은 구조를 가지고 있음
	 		-내부클래스의 맴버변수 중 하나라도 static이 있으면
	 		-내부클래스를 static으로 만들어야 된다.
	 		-일반 static 접근 방법을 사용하면 된다.(클래스이름.변수)
	 		 (이 때 외부클래스를 생성하지 않아도 된다.)
	 4. Anonymous(익명)
	 	형식1) 외부클래스 안에서 객체 생성
	 	외부클래스{
	 	...
	 	내부클래스 참조변수 = new 생성자(){
	 	...}; // 새미콜론이 있음 클래스 선언이 아닌 객체 생성이기 때문이다.
	 	}
	 	----------
	 	형식2) 외부클래스의 메서드 안에서 객체 생성
	 	public void methodA(){
	 	...
	 	new 내부클래스(){
	 	...};
	 	}
	 	----------
	 	형식3) 메서드를 호출할 때 인자로 일회용 내부클래스를 넣는 방법
	 	public void methodA(new 내부클래스(){...});
	 	
	 	특징) -정의된 클래스의 이름이 없는 클래스
	 		-이름이 없으므로 다시 호출 할 수 없다.
	 		-일회용으로 한번 사용되고 다시 사용할 수 없다.
	 */
}

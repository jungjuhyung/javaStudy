package com.ict.day07;

public class Ex02 {
	public static void main(String[] args) {
		// 배열 : 같은 자료형의 데이터들을 한 곳에 모아둔 묶음
		// 		** 반드시 같은 자료형이어야한다.
		// 		생성할 때 크기를 지정해야 된다.(지정하지 않으면 생성 안됨)
		// 		한번 지정한 크기는 변경이 안됨
		// 		배열 안에 데이터를 가져오기 위해서는 일반적으로 for문을 사용
		
		// 배열 생성 순서 : 선언 -> 생성 -> 초기화(데이터 저장)
		// 1. 선언 : 자료형 이름[]; 또는 자료형[] 이름;
		int su[]; // int[] su; 이것도 사용 가능
		// 2. 생성 : 이름 = new 자료형[배열크기=방의 수];
		// 	  new 예약어 : 메모리에 데이터를 저장할 공간을 만들어달라는 뜻
		// 			=> 인스턴스, 객체 생성
		su = new int[4]; // 여기서 4는 index 4까지 만드는 것이 아닌 4개를 만든다는 뜻
		// 3. 데이터 저장 : 이름[index = 위치값 = 0부터 시작]
		// 				데이터는 같은 자료형이어야 한다.(프로모션 가능 : 작은자료형이 큰자료형으로 변경)
		// 0부터 차례대로 넣을 필요 없음
		su[0] =100;
		su[1] = 'a'; // 프로모션
		su[2] = (int)3.14; // 큰 자료형은 안되기 때문에 디모션해서 넣어야한다. // 3이 들어감
		su[3] = 100;
		// su[4] = 107; // 코드에서는 오류가 없지만 실행하면 오류 발생(runtime 오류)
		
		// 4. 배열 호출하면 주소(생성ID)가 출력된다.
		// 호출이나 저장 과정은 항상 주소를 타고 가서 해당 위치값을 찾는 과정이 동반된다.
		System.out.println(su);
		System.out.println(su[0]);
		System.out.println(su[1]);
		System.out.println(su[2]);
		System.out.println(su[3]);
		
		// 배열의 저장공간 하나하나는 변수로써 작동할 수 있다.
		// 때문에 저장공간 하나에는 같은 자료형 한정으로 새로운 값을 저장할 수 있다.
		su[2] = 107;
		System.out.println(su[2]);
		System.out.println("\n-----------------------");
		
		// 배열을 출력할 때는 보통 for문 사용
		for (int i = 0; i < su.length; i++) {
			System.out.println(su[i]);
		}
		
		
	}
}
